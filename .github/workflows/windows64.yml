name: Windows Custom Build

on:
  push:
    branches: [ build, test ]
  workflow_dispatch:
    inputs:
      skip-resources:
        description: 'Skip resource replacement? (true/false)'
        required: false
        default: 'false'
      skip-menu:
        description: 'Skip menu modifications? (true/false)'
        required: false
        default: 'false'

jobs:
  build:
    runs-on: windows-2022
    environment: build
    if: "!contains(github.event.head_commit.message, '[skip build]') && !contains(github.event.head_commit.message, '[skip ci]') && !contains(github.event.head_commit.message, '[skip win]') && !contains(github.event.head_commit.message, '[skip win-tar]')"

    steps:
    - uses: actions/checkout@v4
      with:
        submodules: 'recursive'
      
    - name: Use Node.js 20.x
      uses: actions/setup-node@v4
      with:
        node-version: 20.x

    - name: Setup Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.10'
        architecture: 'x64'

    - name: Install global dependencies
      run: |
        npm install -g node-gyp
        npm install -g yarn
        
    - name: Install project dependencies
      run: |
        npm un node-pty serialport
        npm i
        npm i -S -E node-pty@1.1.0-beta14
        npm i -S -E serialport@13.0.0

    # ================= 修复后的菜单文件替换 =================
    - name: Replace Menu File
      if: ${{ github.event_name != 'workflow_dispatch' || inputs.skip-menu == 'false' }}
      run: |
        # 1. 创建新的自定义菜单文件内容
        $customMenuContent = @"
        /**
         * Custom menu for company build - removed help section
         */
        const { app, Menu } = require('electron')
        const globalState = require('./glob-state')
        
        function buildMenu () {
          const e = globalState.get('translate')
        
          const template = [
            {
              label: e('edit'),
              submenu: [
                {
                  label: e('newBookmark'),
                  click () {
                    globalState.get('win').webContents.send('new-ssh', null)
                  }
                },
                {
                  role: 'undo',
                  label: e('undo')
                },
                {
                  role: 'redo',
                  label: e('redo')
                },
                {
                  type: 'separator'
                },
                {
                  role: 'cut',
                  label: e('cut')
                },
                {
                  role: 'copy',
                  label: e('copy'),
                  accelerator: 'CmdOrCtrl+C'
                },
                {
                  role: 'paste',
                  label: e('paste'),
                  accelerator: 'CmdOrCtrl+V'
                },
                {
                  role: 'pasteandmatchstyle',
                  label: e('pasteandmatchstyle')
                },
                {
                  role: 'delete',
                  label: e('del')
                },
                {
                  label: e('selectall'),
                  accelerator: 'CmdOrCtrl+A',
                  click () {
                    globalState.get('win').webContents.send('selectall', null)
                  }
                },
                {
                  type: 'separator'
                },
                {
                  label: e('settings'),
                  click () {
                    globalState.get('win').webContents.send('openSettings', null)
                  }
                }
              ]
            },
            {
              label: e('view'),
              submenu: [
                {
                  role: 'forcereload',
                  label: e('forcereload')
                },
                {
                  role: 'toggledevtools',
                  label: e('toggledevtools')
                },
                {
                  type: 'separator'
                },
                {
                  click () {
                    globalState.get('win').webContents.send('zoom-reset', null)
                  },
                  label: e('resetzoom')
                },
                {
                  click () {
                    globalState.get('win').webContents.send('zoomin', null)
                  },
                  label: e('zoomin')
                },
                {
                  click () {
                    globalState.get('win').webContents.send('zoomout', null)
                  },
                  label: e('zoomout')
                },
                {
                  type: 'separator'
                },
                {
                  role: 'togglefullscreen',
                  label: e('togglefullscreen')
                }
              ]
            },
            {
              role: 'window',
              label: e('window'),
              submenu: [
                {
                  role: 'minimize',
                  label: e('minimize')
                },
                {
                  label: e('maximize'),
                  click () {
                    globalState.get('win').maximize()
                  }
                },
                {
                  label: e('restart'),
                  click () {
                    globalState.get('win').close()
                    app.relaunch()
                  }
                }
              ]
            }
          ]
        
          if (process.platform === 'darwin') {
            template.unshift({
              label: app.name,
              submenu: [
                {
                  role: 'services',
                  submenu: []
                },
                {
                  type: 'separator'
                },
                {
                  role: 'hide',
                  label: e('hide')
                },
                {
                  role: 'hideothers',
                  label: e('hideothers')
                },
                {
                  role: 'unhide',
                  label: e('unhide')
                },
                {
                  type: 'separator'
                },
                {
                  role: 'quit',
                  label: e('quit')
                }
              ]
            })
        
            template[2].submenu = template[2].submenu
              .filter(d => d.role !== 'togglefullscreen')
        
            // Edit menu
            template[1].submenu.push({
              type: 'separator'
            }, {
              label: 'Speech',
              submenu: [
                {
                  role: 'startspeaking',
                  label: e('startspeaking')
                },
                {
                  role: 'stopspeaking',
                  label: e('stopspeaking')
                }
              ]
            })
        
            // Window menu
            template[3].submenu = [
              ...template[3].submenu,
              {
                role: 'zoom',
                label: e('zoom')
              },
              {
                type: 'separator'
              },
              {
                role: 'front',
                label: e('front')
              }
            ]
          }
        
          const menu = Menu.buildFromTemplate(template)
          return menu
        }
        
        module.exports = buildMenu
        "@
        
        # 2. 替换原始菜单文件
        $menuFilePath = "src/app/lib/menu.js"
        Set-Content -Path $menuFilePath -Value $customMenuContent
        
        # 3. 验证替换结果 - 修复验证逻辑
        Write-Output "菜单文件已替换:"
        
        # 检查实际菜单定义中是否包含帮助菜单
        $hasHelpMenu = $false
        $content = Get-Content $menuFilePath -Raw
        
        # 检查是否包含帮助菜单定义
        if ($content -match "role: 'help'" -or $content -match "label: e\('help'\)") {
            $hasHelpMenu = $true
        }
        
        if ($hasHelpMenu) {
            Write-Error "菜单文件中仍包含帮助菜单定义，替换失败！"
            Get-Content $menuFilePath | Select-String "help" -Context 3
            exit 1
        } else {
            Write-Output "菜单文件中未找到帮助菜单定义，替换成功！"
        }
        
    # ================= 移除关于事件监听器 =================
    - name: Remove About Event Listeners
      run: |
        # ...（保持不变）
        
    # ================= 资源替换步骤 =================
    - name: Replace resources
      if: ${{ github.event_name != 'workflow_dispatch' || inputs.skip-resources == 'false' }}
      run: |
        # ...（保持不变）
        
    # ================= 更新页面标题和资源引用 =================
    - name: Update Page Title and Resources
      run: |
        # ...（保持不变）
        
    # ================= 编译步骤 =================
    - name: Build application
      run: npm run b
      
    - name: Create Windows installer
      if: "!contains(github.event.head_commit.message, 'skip build')"
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        BUILD_NUMBER: ${{ secrets.BUILD_NUMBER }}
        CUSTOM_UPLOAD_URL: ${{ secrets.CUSTOM_UPLOAD_URL }}
      run: node build/bin/build-win-tar
      
    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: electerm-installer
        path: dist/*.tar.gz
